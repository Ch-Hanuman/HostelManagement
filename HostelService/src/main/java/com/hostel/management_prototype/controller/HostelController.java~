package com.hostel.management_prototype.controller;

import com.fasterxml.jackson.annotation.JsonView;
import com.hostel.management_prototype.dto.HostelDTO;
import com.hostel.management_prototype.dto.ResponseDTO;
import com.hostel.management_prototype.service.HostelService;
import com.hostel.management_prototype.utilities.Views;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Map;

@RestController
public class HostelController {
    @Autowired
    private HostelService hostelService;

    @GetMapping("/cities")
    public ResponseEntity<ResponseDTO<List<String>>> getDistinctCities(){
        List<String> cities = hostelService.getDistinctCities();
        return ResponseEntity
                .status(HttpStatus.OK)
                .body(new ResponseDTO<>(true, HttpStatus.OK.value(), "Success", cities));
    }

    @GetMapping("/areas")
    public ResponseEntity<ResponseDTO<List<String>>> getDistinctAreas(@RequestParam String city){
        List<String> areas = hostelService.getDistinctAreas(city);
        return ResponseEntity
                .status(HttpStatus.OK)
                .body(new ResponseDTO<>(true, HttpStatus.OK.value(), "Success", areas));
    }

    @GetMapping("/hostels")
    @JsonView(Views.BasicHostel.class)
    public ResponseEntity<ResponseDTO<List<HostelDTO>>> getHostels(
            @RequestParam Map<String, String> queryParams,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam List<String> sort){
        List<HostelDTO> hostels = hostelService.getFilteredHostels(queryParams, page, size, sort);
        return ResponseEntity
                .status(HttpStatus.OK)
                .body(new ResponseDTO<>(true, HttpStatus.OK.value(), "Success", hostels));
    }

    @GetMapping("/hostel-details/{id}")
    @JsonView(Views.HostelRoomsAmenities.class)
    public ResponseEntity<ResponseDTO<HostelDTO>> getHostelDetails(@PathVariable int id){
        HostelDTO hostel = hostelService.getHostelDetails(id);
        return ResponseEntity
                .status(HttpStatus.OK)
                .body(new ResponseDTO<>(true, HttpStatus.OK.value(), "Success", hostel));
    }
}
